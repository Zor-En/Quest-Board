const db=require("../models/QuestBoardModels"),questBoardController={getTasks:async(s,e,r)=>{const{projectsId:t}=s.body;try{const s=[t],o='\n      SELECT \n          tasks.tasks_id, \n          tasks.name, \n          tasks.desc, \n          ARRAY_AGG(accounts.username) AS "assignedUsers"\n      FROM \n          tasks\n      LEFT JOIN \n          task_assignments ON tasks.tasks_id = task_assignments.task_id\n      LEFT JOIN \n          accounts ON task_assignments.user_id = accounts.user_id\n      WHERE \n          tasks.projects_id = $1\n      GROUP BY \n          tasks.tasks_id\n      ORDER BY \n          tasks.tasks_id;\n  ',a=await db.query(o,s);return console.log(a.rows),e.locals.taskList=a.rows,r()}catch(s){return r({log:`userController.getProjects: ERROR: ${s}`,message:{err:"Error occured in userController.getProjects."},status:500})}},newTask:async(s,e,r)=>{const{projectsId:t,desc:o,name:a}=s.body;console.log(s.body);try{const s=[t,o,a],n='INSERT INTO tasks (projects_id, "desc", name) VALUES ($1, $2, $3)',c=await db.query(n,s);return e.locals.newTask=c.rows[0],r()}catch(s){return r({log:`userController.newTask: ERROR: ${s}`,message:{err:"Error occured in userController.newTask."},status:500})}},deleteTask:async(s,e,r)=>{const{tasksId:t}=s.body;console.log(s.body);try{const s=[t],o="DELETE FROM tasks WHERE tasks_id = $1",a=await db.query(o,s);return e.locals.deleteTask=a.rows[0],r()}catch(s){return r({log:`userController.deleteTask: ERROR: ${s}`,message:{err:"Error occured in userController.deleteTask."},status:500})}},updateTask:async(s,e,r)=>{const{tasksId:t,desc:o,name:a}=s.body;console.log("body",s.body);try{const s=[o,a,t];console.log("params",s);const e='UPDATE tasks SET "desc" = $1, name = $2 WHERE tasks_id = $3',n=await db.query(e,s);return console.log("result",n),r()}catch(s){return r({log:`userController.updateTask: ERROR: ${s}`,message:{err:"Error occured in userController.updateTask."},status:500})}},assignUser:async(s,e,r)=>{const{tasksId:t,userId:o}=s.body;console.log("in assignUser middleware... tasksId: ",t,"userId: ",o);try{const s=[t,o],e="INSERT INTO task_assignments (task_id, user_id) VALUES ($1, $2);";return await db.query(e,s),r()}catch(s){return r({log:`userController.assignUser: ERROR: ${s}`,message:{err:"Error occured in userController.assignUser."},status:500})}}};module.exports=questBoardController;